#!/usr/bin/env python

import argparse
import getpass
import json
import requests
import sys

# ----------------------------------------------------------------------------

# A function that converts a multilevel dictionary into a flat dictionary.
def flatten_dict(d):
    out_d = {}
    path = []

    def f(d):
        for key, value in d.iteritems():
            path.append(key)
            if isinstance(value, dict):
                f(value)
            else:
                out_d['.'.join(path)] = value
            path.pop()

    f(d)

    return out_d

# A simple function to print out some rows
def print_rows(rows, headers=None, show_headers=True):
    if len(rows) == 0:
        return

    # Lets make the output pretty for hierarchical rows.
    rows = [flatten_dict(row) for row in rows]
    
    # If we didn't have some headers passed in, extract them from the dataset.
    if headers is None:
        headers = set()
        for row in rows:
            for header in row.iterkeys():
                headers.add(header)
        headers = sorted(headers)

    sizes = [len(header) for header in headers]

    for row in rows:
        for i, header in enumerate(headers):
            value = row.get(header)
            if value is not None:
                value = str(value)
                if sizes[i] < len(value):
                    sizes[i] = len(value)

    # Show the headers if that's what the user wants.
    if show_headers:
        for i, header in enumerate(headers):
            sys.stdout.write(header.ljust(sizes[i]))
            sys.stdout.write(' ')
        print

        for size in sizes:
            sys.stdout.write('=' * size)
            sys.stdout.write(' ')
        print

    for row in rows:
        for i, header in enumerate(headers):
            value = row.get(header)
            if value is None:
                sys.stdout.write(' ' * sizes[i])
                sys.stdout.write(' ')
            else:
                sys.stdout.write(str(value).ljust(sizes[i]))
                sys.stdout.write(' ')
        print

# ----------------------------------------------------------------------------

def create_project(args):
    if args.script == '':
        print >> sys.stderr, 'script cannot be empty'
        return 1

    project = {
        'name': args.name,
    }

    # Create the project
    print 'Creating the project...'
    response = requests.post(args.url + '/api/projects',
            data=json.dumps(project),
            headers={'content-type': 'application/json'},
            auth=(args.user, args.password))
    response.raise_for_status()

    data = response.json()
    
    print_rows([data['project']],
            headers=['_id', 'name', 'current_graph'],
            show_headers=args.show_headers)
    print

    if args.script:
        args.id = data['project']['current_graph']
        run_groovy(args)

    return 0

# ----------------------------------------------------------------------------

def show(path, name, args):
    url = '{}/{}'.format(args.url, path)

    response = requests.get(url,
            auth=(args.user, args.password))
    response.raise_for_status()

    print_rows(response.json()[name],
            show_headers=args.show_headers)

    return 0

def show_projects(args):
    return show('/api/projects', 'projects', args)

def show_graphs(args):
    return show('/api/graphs', 'graphs', args)

def show_jobs(args):
    return show('/api/jobs', 'jobs', args)

# ----------------------------------------------------------------------------

def delete(path, name, args):
    url = '{}/{}/{}'.format(args.url, path, args.id)

    response = requests.delete(url,
            auth=(args.user, args.password))
    response.raise_for_status()

    print name, 'deleted'

    return 0

def delete_project(args):
    return delete('/api/projects', 'project', args)

def delete_graph(args):
    return delete('/api/graphs', 'graph', args)

def delete_job(args):
    return delete('/api/jobs', 'job', args)

# ----------------------------------------------------------------------------

def import_graph(args):
    url = '{}/api/graphs/{}/file-import'.format(args.url, args.id)

    response = requests.post(url,
            data={'format': args.format},
            files={'file': args.file},
            auth=(args.user, args.password))
    response.raise_for_status()

    print 'graph imported'

    return 0

def export_graph(args):
    url = '{}/api/graphs/{}/file-export'.format(args.url, args.id)

    response = requests.post(url,
            data={'format': args.format},
            auth=(args.user, args.password))
    response.raise_for_status()

    output_file = args.output_file or sys.stdout
    output_file.write(response.content)
    output_file.flush()

    # It looks nicer if we add a trailing null when printing out to stdout.
    if output_file is sys.stdout:
        print

    return 0

# ----------------------------------------------------------------------------

def run_groovy(args):
    print 'Running the groovy script...'

    url = '{}/rexster-resource/graphs/{}/tp/gremlin'.format(
            args.url,
            args.id)

    response = requests.post(url,
            data=json.dumps({'script': args.script.read()}),
            headers={'content-type': 'application/json'},
            auth=(args.user, args.password))
    response.raise_for_status()

    print 'done'

    return 0

# ----------------------------------------------------------------------------

def run_degrees(args, analysis):
    url = '{}/api/graphs/{}/analysis/{}'.format(
            args.url,
            args.id,
            analysis)

    response = requests.post(url,
            auth=(args.user, args.password))
    response.raise_for_status()

    print_rows([response.json()])

    return 0

def run_titan_degrees(args):
    return run_degrees(args, 'titan-degrees')

def run_faunus_degrees(args):
    return run_degrees(args, 'faunus-degrees')

# ----------------------------------------------------------------------------

def run_jung_pagerank(args):
    url = '{}/api/graphs/{}/analysis/jung-pagerank'.format(args.url, args.id)

    response = requests.post(url,
            headers={'content-type': 'application/json'},
            data=json.dumps({'alpha': args.alpha}),
            auth=(args.user, args.password))
    response.raise_for_status()

    print_rows([response.json()])

    return 0

# ----------------------------------------------------------------------------

def not_empty(string):
    if string == '':
        raise argparse.ArgumentTypeError('cannot be empty')
    return string

def output_or_stdout(string):
    if string == '-':
        return sys.stdout
    return argparse.FileType('wb')(string)

# ----------------------------------------------------------------------------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--user',
            help='the dendrite user. May include password after a ":"')
    parser.add_argument('--password',
            help='the dendrite password')
    parser.add_argument('--url',
            help='which server to use',
            default='http://localhost:8000/dendrite')
    parser.add_argument('--no-headers', '--nh',
            dest='show_headers',
            help='do not show headers',
            action='store_false',
            default=True)

    subparsers = parser.add_subparsers(
            help='sub-command help')

    # Options for creating a project.
    parser_create_project = subparsers.add_parser('create-project')
    parser_create_project.add_argument('name',
            type=not_empty)
    parser_create_project.add_argument('--script',
            type=argparse.FileType('rb'))
    parser_create_project.set_defaults(func=create_project)

    # Options for showing projects.
    parser_show_projects = subparsers.add_parser('projects')
    parser_show_projects.set_defaults(func=show_projects)

    # Options for showing graphs.
    parser_show_graphs = subparsers.add_parser('graphs')
    parser_show_graphs.set_defaults(func=show_graphs)

    # Options for showing jobs.
    parser_show_jobs = subparsers.add_parser('jobs')
    parser_show_jobs.set_defaults(func=show_jobs)

    # Options for deleting a project.
    parser_delete_project = subparsers.add_parser('delete-project')
    parser_delete_project.add_argument('id',
            type=int)
    parser_delete_project.set_defaults(func=delete_project)

    # Options for deleting a graph.
    parser_delete_graph = subparsers.add_parser('delete-graph')
    parser_delete_graph.add_argument('id',
            type=int)
    parser_delete_graph.set_defaults(func=delete_graph)

    # Options for deleting a job.
    parser_delete_job = subparsers.add_parser('delete-job')
    parser_delete_job.add_argument('id',
            type=int)
    parser_delete_job.set_defaults(func=delete_job)

    # Options for importing a graph.
    parser_import_graph = subparsers.add_parser('import-graph')
    parser_import_graph.add_argument('id',
            type=int)
    parser_import_graph.add_argument('format',
            type=lambda s: s.lower(),
            choices=['graphson', 'graphml', 'gml'])
    parser_import_graph.add_argument('file',
            type=argparse.FileType('rb'))
    parser_import_graph.set_defaults(func=import_graph)

    # Options for exporting a graph.
    parser_export_graph = subparsers.add_parser('export-graph')
    parser_export_graph.add_argument('-o', '--output-file',
            help='write to this file',
            type=output_or_stdout)
    parser_export_graph.add_argument('id',
            type=int)
    parser_export_graph.add_argument('format',
            type=lambda s: s.lower(),
            choices=['graphson', 'graphml', 'gml'])
    parser_export_graph.set_defaults(func=export_graph)

    # Options for running jobs.
    parser_run_groovy = subparsers.add_parser('run-groovy')
    parser_run_groovy.add_argument('id',
            type=not_empty,
            help='the id of the graph according to rexster')
    parser_run_groovy.add_argument('script',
            type=argparse.FileType('rb'))
    parser_run_groovy.set_defaults(func=run_groovy)

    parser_run_titan_degrees = subparsers.add_parser('run-titan-degrees')
    parser_run_titan_degrees.add_argument('id',
            type=int)
    parser_run_titan_degrees.set_defaults(func=run_titan_degrees)

    parser_run_faunus_degrees = subparsers.add_parser('run-faunus-degrees')
    parser_run_faunus_degrees.add_argument('id',
            type=int)
    parser_run_faunus_degrees.set_defaults(func=run_faunus_degrees)

    parser_run_jung_pagerank = subparsers.add_parser('run-jung-pagerank')
    parser_run_jung_pagerank.add_argument('-a', '--alpha',
            default=0.15,
            help='The PageRank alpha value (default 0.15)')
    parser_run_jung_pagerank.add_argument('id',
            type=int)
    parser_run_jung_pagerank.set_defaults(func=run_jung_pagerank)

    args = parser.parse_args()

    # The username and password could be embedded in the user, so split them
    # out.
    if args.user is not None and ':' in args.user:
        user, password = args.user.split(':', 1)
        args.user = user
        args.password = password

    # If we didn't get the username or password, prompt until we get it.
    while args.user is None or args.user == '':
        sys.stdout.write('please enter in the username: ')
        sys.stdout.flush()
        args.user = sys.stdin.readline()

    while args.password is None or args.password == '':
        sys.stdout.write('please enter in the password: ')
        sys.stdout.flush()
        args.password = getpass.getpass()

    try:
        return args.func(args)
    except requests.HTTPError, e:
        print e
        print e.response.content
        return 1

# ----------------------------------------------------------------------------

if __name__ == '__main__':
    sys.exit(main())
